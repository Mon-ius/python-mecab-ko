name: Build

on:
  push:
    tags:
      - v*

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      CIBW_ARCHS_MACOS: "x86_64 arm64"
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11]
        cibw_archs: [auto64]
        include:
          - os: ubuntu-20.04
            cibw_archs: aarch64

    steps:
      - name: Set up QEMU
        if: matrix.cibw_archs == 'aarch64'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.3
        env:
          CIBW_ARCHS: ${{ matrix.cibw_archs }}

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_windows_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      MECAB_PATH: "C:\\mecab"
    strategy:
      matrix:
        os: [windows-2019]
        arch: [
          {cibw: x86, target: x86},
          {cibw: AMD64, target: x64},
        ]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Installing mecab-ko
        run: |
          curl --location --output "libmecab-ko.zip" "https://github.com/jonghwanhyeon/mecab-ko/releases/download/0.996-ko-0.9.2/libmecab-0.996-ko-0.9.2-windows-${{ matrix.arch.target }}.zip"
          unzip "libmecab-ko.zip" -d "${MECAB_PATH}"
        shell: bash

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.3
        env:
          CIBW_ARCHS: "${{ matrix.arch.cibw }}"
          CIBW_BEFORE_BUILD_WINDOWS: "pip install delvewheel"
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair --add-path ${{ env.MECAB_PATH }} -w {dest_dir} {wheel}"

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_windows_wheels, build_sdist]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}